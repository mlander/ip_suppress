<?php
/**
 * Created by PhpStorm.
 * User: michaellander
 * Date: 2/24/15
 * Time: 2:06 PM
 */
//@todo: check files[] in info
//@todo: variable get to override?
//@todo: comments
//@todo: readmes

/**
 * Restrict suppressed user FROM only listed pages.
 */
define('IP_SUPPRESS_BLACKLIST', 0);

/**
 * Restrict suppressed user TO only listed pages
 */
define('IP_SUPPRESS_WHITELIST', 1);

/**
 * Implements hook_permission().
 */
function ip_suppress_permission() {
  return array(
    'administer ip suppress' =>  array(
      'title' => t('Administer IP Suppress'),
      'description' => t('Perform administration tasks for IP Suppress.'),
    ),
    'bypass ip suppress restrictions' =>  array(
      'title' => t('Bypass IP Suppress Restrictions'),
      'description' => t('Bypass check for IP Suppress restrictions.'),
    ),
    //@todo: add bypass access
  );

}

/**
 * Implements hook_menu().
 */
function ip_suppress_menu() {

// @todo: hook_menu config(redirect, allowed paths), whitelist, blacklist
  // IP address blocking.
  $items['admin/config/people/ip-suppress'] = array(
    'title' => 'IP Suppress',
    'description' => 'Manage IP Suppress Configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ip_suppress_settings_form'),
    'access arguments' => array('administer ip suppress'),
    'file' => 'ip_suppress.admin.inc',
    'weight' => 10,
  );
  // IP address blocking.
  $items['admin/config/people/ip-suppress/settings'] = array(
    'title' => 'Settings',
    'description' => 'Manage IP Suppress Configuration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ip_suppress_settings_form'),
    'access arguments' => array('administer ip suppress'),
    'file' => 'ip_suppress.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // IP address blocking.
  $items['admin/config/people/ip-suppress/list'] = array(
    'title' => 'List',
    'description' => 'Manage Suppressed IP addresses.',
    'page callback' => 'ip_suppress_list',
    'access arguments' => array('administer ip suppress'),
    'file' => 'ip_suppress.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/people/ip-suppress/delete/%ip_suppress_ip'] = array(
    'title' => 'Delete IP address',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ip_suppress_suppress_delete', 5),
    'access arguments' => array('administer ip suppress'),
    'file' => 'ip_suppress.admin.inc',
  );

  return $items;

}
function ip_suppress_check() {
  global $user;
  // Check if user is allowed to skip check or not in suppressed ip table.
  if($user->uid == 1 || user_access('bypass ip suppress restrictions') || user_access('administer ip suppress') || !ip_suppress_ip_load_by_ip(ip_address())) {
    return;
  }
  // Convert paths to lowercase. This allows comparison of the same path
  // with different case. Ex: /Page, /page, /PAGE.
  $visibility = variable_get('ip_suppress_visibility', IP_SUPPRESS_WHITELIST);
  $pages = strtolower (variable_get('ip_suppress_pages'));
  $redirect = strtolower (variable_get('ip_suppress_redirect'));
  $request_path = strtolower (request_path());
  if($redirect == '<front>') {
    $redirect_pieces['path'] = '';
  } else {
    $redirect_pieces = drupal_parse_url($redirect);
  }
  $path =  strtolower ($_GET['q']);

  if(function_exists('drupal_get_path_alias')) {
    $path_alias = strtolower (drupal_get_path_alias($_GET['q']));
  } else {
    $path_alias = $path;
  }
  // Check if module is configured, else skip processing.
  if(!$redirect) {
    return;
  }

  // @todo: This might not be needed, depends how we want to handle message
//   Check if whitelist
//  if($visibility) {
//    // If whitelist, add redirect path to list.
//    $pages .= $pages ? "\n" . $redirect : $redirect;
//  } else {
//    // If blacklist, remove redirect from list.
//    if($pages) {
//      $pages = preg_replace('/'.preg_quote($redirect).'$/m', '', $pages);
//    }
//  }
  $page_match = drupal_match_path($path_alias, $pages);
  if (!$page_match && $path_alias != $path) {
    $page_match = drupal_match_path($path, $pages);
  }

  $page_match = !(!$visibility xor $page_match);
  if($page_match && $redirect_pieces['path'] != $path_alias && $redirect_pieces['path'] != $path && $redirect_pieces['path'] != $request_path) {
    // Prevent this page from caching the redirect.
    drupal_page_is_cacheable(FALSE);

    $options = $redirect_pieces;
    unset($options['path']);
    drupal_goto($redirect_pieces['path'], array_filter($options));
  }
}
/**
 * Implements hook_boot().
 */
function ip_suppress_boot() {
  if(ip_suppress_ip_load_by_ip(ip_address())) {
    drupal_page_is_cacheable(FALSE);
    drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);
    ip_suppress_check();
  }
}

/**
 *
 */
function ip_suppress_ip_insert($ip) {
  if(!ip_suppress_ip_load_by_ip($ip)) {
    db_insert('ip_suppress')
      ->fields(array('ip' => $ip))
      ->execute();
  }
}


/**
 * Retrieve a supressed IP address from the database.
 *
 * @param $iid integer
 *   The ID of the supressed IP address to retrieve.
 *
 * @return
 *   The supressed IP address from the database as an array.
 */
function ip_suppress_ip_load($iid) {
  return db_query("SELECT * FROM {ip_suppress} WHERE iid = :iid", array(':iid' => $iid))->fetchAssoc();
}

function ip_suppress_ip_load_by_ip($ip) {
  return db_select('ip_suppress', 'ips')->fields('ips')->condition('ips.ip', $ip)->execute()->fetchAssoc();
}


/**
 *
 */
function ip_suppress_ip_delete($iid) {
  db_delete('ip_suppress')
    ->condition('iid', $iid)
    ->execute();
}

/**
 *
 */
function ip_suppress_ip_delete_by_ip($ip) {
  db_delete('ip_suppress')
    ->condition('ip', $ip)
    ->execute();
}
